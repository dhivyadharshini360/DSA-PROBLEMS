class Solution {
    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length - 1;

        // Edge case: If the array is not rotated, the first element is the minimum
        if (nums[start] <= nums[end]) {
            return nums[start];
        }

        while (start <= end) {
            int mid = start + (end - start) / 2;

            // Check if mid is the minimum element
            // Ensure that mid + 1 and mid - 1 are within valid bounds
            if (mid < nums.length - 1 && nums[mid] > nums[mid + 1]) {
                return nums[mid + 1];
            }
            if (mid > 0 && nums[mid - 1] > nums[mid]) {
                return nums[mid];
            }

            // If the left half is sorted, the minimum is in the right half
            if (nums[start] <= nums[mid]) {
                start = mid + 1;
            } 
            // Otherwise, the right half is sorted, the minimum is in the left half
            else {
                end = mid - 1;
            }
        }

        return nums[0];  // This will never be reached because the minimum will be found in the loop
    }
}

