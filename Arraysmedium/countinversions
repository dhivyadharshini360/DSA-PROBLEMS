class Solution {
    // Function to count inversions in the array using Merge Sort
    static int inversionCount(int arr[]) {
        int n = arr.length;
        int[] temp = new int[n];  // Temporary array for merging
        return mergeSortAndCount(arr, temp, 0, n - 1);
    }

    // Helper function that uses Merge Sort and counts inversions
    static int mergeSortAndCount(int arr[], int temp[], int left, int right) {
        int count = 0;
        if (left < right) {
            int mid = (left + right) / 2;

            // Count inversions in the left and right halves
            count += mergeSortAndCount(arr, temp, left, mid);
            count += mergeSortAndCount(arr, temp, mid + 1, right);

            // Count inversions during the merge process
            count += mergeAndCount(arr, temp, left, mid, right);
        }
        return count;
    }

    // Helper function to merge two halves and count inversions
    static int mergeAndCount(int arr[], int temp[], int left, int mid, int right) {
        int i = left;    // Starting index for left subarray
        int j = mid + 1; // Starting index for right subarray
        int k = left;    // Starting index to be sorted
        int invCount = 0;

        // Merge the two subarrays while counting inversions
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                // There are mid - i inversions, because all elements from arr[i] to arr[mid] are greater than arr[j]
                temp[k++] = arr[j++];
                invCount += (mid - i + 1);
            }
        }

        // Copy the remaining elements of the left subarray, if any
        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        // Copy the remaining elements of the right subarray, if any
        while (j <= right) {
            temp[k++] = arr[j++];
        }

        // Copy the sorted subarray back to the original array
        System.arraycopy(temp, left, arr, left, right - left + 1);

        return invCount;
    }
}
